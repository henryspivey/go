{"version":3,"sources":["SurveyApp.jsx","Survey.jsx","App.js","serviceWorker.js","index.js"],"names":["endpoint","SurveyApp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","defineProperty","target","name","value","onSubmit","_this$state","state","title","options","votes","map","option","text","Array","from","length","axios","post","headers","Content-Type","then","res","getTask","id","url","get","data","surveys","item","react_default","a","createElement","Card","key","_id","color","fluid","Content","Header","textAlign","style","wordWrap","Meta","extra","Button","animated","basic","href","concat","visible","hidden","Icon","addOption","e","toConsumableArray","removeOption","idx","filter","s","sidx","handleOptionChange","evt","console","log","newOptions","optionIdx","objectSpread","question","disabled","_this2","_this$state2","className","as","Form","Input","type","placeholder","i","Field","inline","required","maxLength","icon","labelPosition","onClick","Segment","Group","Component","Survey","match","params","assertThisInitialized","put","response","getSurveyResults","catch","error","handleChange","_ref","getSurvey","_response$data","loading","statistics","VoteStatistics","Statistic","widths","vote","horizontal","label","_this3","Radio","checked","App","Container","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yYAIIA,EAAW,wBA4KAC,cAzKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgBRQ,SAAW,SAAAC,GACTR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACGO,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,SAnBnBb,EAuBnBc,SAAW,WAAM,IAAAC,EACaf,EAAKgB,MAA5BC,EADUF,EACVE,MAAMC,EADIH,EACJG,QAAQC,EADJJ,EACII,MACnBD,EAAUA,EAAQE,IAAI,SAACC,GACrB,OAAOA,EAAOC,OAEhBH,EAAQI,MAAMC,KAAK,CAACC,OAAQP,EAAQO,QAAS,kBAAM,IAE/CR,GACFS,IACGC,KACC9B,EAAW,cACX,CACEoB,QACAC,UACAC,SAEF,CACES,QAAS,CACPC,eAAgB,uCAIrBC,KAAK,SAAAC,GACJ/B,EAAKgC,UACLhC,EAAKS,SAAS,CACZQ,MAAO,GACPC,QAAS,QAjDAlB,EAuDnBgC,QAAU,SAACC,GACT,IAAIC,EAAMrC,EAAW,cACrB6B,IAAMS,IAAID,GAAKJ,KAAK,SAAAC,GACLA,EAAIK,KAEfpC,EAAKS,SAAS,CACZ4B,QAASN,EAAIK,KAAKhB,IAAI,SAAAkB,GACpB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,IAAKL,EAAKM,IAAKC,MAAM,SAASC,OAAK,GACvCP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,KACIR,EAAAC,EAAAC,cAACC,EAAA,EAAKM,OAAN,CAAaC,UAAU,QACrBV,EAAAC,EAAAC,cAAA,OAAKS,MAAO,CAAEC,SAAU,eAAiBb,EAAKrB,QAGhDsB,EAAAC,EAAAC,cAACC,EAAA,EAAKU,KAAN,eACUd,EAAKM,MAGjBL,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,CAAcM,OAAK,GACjBd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,UAAQ,EAACC,OAAK,EAACC,KAAI,eAAAC,OAAiBpB,EAAKM,MAC/CL,EAAAC,EAAAC,cAACa,EAAA,EAAOP,QAAR,CAAgBY,SAAO,GAAvB,eACApB,EAAAC,EAAAC,cAACa,EAAA,EAAOP,QAAR,CAAgBa,QAAM,GACpBrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMjD,KAAK,wBAS3BZ,EAAKS,SAAS,CACZ4B,QAAS,QAvFErC,EA8FnB8D,UAAY,SAACC,GACX/D,EAAKS,SAAS,CAACS,QAAO,GAAAwC,OAAAzD,OAAA+D,EAAA,EAAA/D,CAAMD,EAAKgB,MAAME,SAAjB,CAA0B,CAACI,KAAM,SA/FtCtB,EAkGnBiE,aAAe,SAAAC,GAAG,OAAI,WACpBlE,EAAKS,SAAS,CACZS,QAASlB,EAAKgB,MAAME,QAAQiD,OAAO,SAACC,EAAGC,GAAJ,OAAaH,IAAQG,QApGzCrE,EAwGnBsE,mBAAqB,SAAAJ,GAAG,OAAI,SAAAK,GAC1BC,QAAQC,IAAI,SACZ,IAAMC,EAAa1E,EAAKgB,MAAME,QAAQE,IAAI,SAACC,EAAQsD,GACjD,OAAGT,IAAQS,EAAkBtD,EACtBpB,OAAA2E,EAAA,EAAA3E,CAAA,GAAIoB,EAAX,CAAmBC,KAAMiD,EAAI5D,OAAOE,UAEtCb,EAAKS,SAAS,CAACS,QAASwD,MA3GxB1E,EAAKgB,MAAQ,CACXC,MAAO,GACPoB,QAAS,GACTwC,SAAU,GACV3D,QAAS,CAAC,CAACI,KAAM,KACjBwD,UAAU,EACV3D,MAAO,IATQnB,mFAcjBG,KAAK6B,2CAoGE,IAAA+C,EAAA5E,KAAA6E,EACkB7E,KAAKa,MAAvBC,EADA+D,EACA/D,MAAOC,EADP8D,EACO9D,QACd,OACEqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,OACb1C,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQiC,UAAU,SAASC,GAAG,MAA9B,eAKF3C,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMI,OAAK,GACTP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,KACER,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMrE,SAAUX,KAAKW,UACnByB,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CACEC,KAAK,OACLzE,KAAK,QACLL,SAAUJ,KAAKI,SACfM,MAAOI,EACP6B,OAAK,EACLwC,YAAY,wBAEbpE,EAAQE,IAAI,SAACC,EAAOkE,GAAR,OACXhD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAAC9C,IAAK4C,EAAGG,UAAQ,GACjCnD,EAAAC,EAAAC,cAAA,yBAAiB8C,EAAE,GACnBhD,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAOC,KAAK,OAAOC,YAAY,yBAAyBK,UAAU,KAAKpF,SAAWwE,EAAKT,mBAAmBiB,QAG9GhD,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQR,OAAK,EAACD,MAAM,OAAOwC,KAAK,UAAhC,YAIJ9C,EAAAC,EAAAC,cAACC,EAAA,EAAKK,QAAN,CAAcM,OAAK,GACjBd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQsC,MAAI,EAACC,cAAc,OAAOC,QAAS3F,KAAK2D,WAC9CvB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMjD,KAAK,SADb,gBAOJ2B,EAAAC,EAAAC,cAAA,OAAKwC,UAAU,OACb1C,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACAxD,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQiC,UAAU,SAASC,GAAG,MAA9B,WAGE3C,EAAAC,EAAAC,cAACC,EAAA,EAAKsD,MAAN,KAEC7F,KAAKa,MAAMqB,mBAjKA4D,uCCFHC,cACpB,SAAAA,EAAYnG,GAAO,IAAAgF,EAAA,OAAA9E,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IAClBnB,EAAA9E,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KAYPe,SAAW,WAAM,IAERmB,EAAO8C,EAAKhF,MAAMoG,MAAMC,OAAxBnE,GACDpB,EAASkE,EAAK/D,MAAdH,MACHb,EAAKC,OAAAoG,EAAA,EAAApG,CAAA8E,GACTrD,IAAM4E,IAAN,eAAA5C,OAAyBzB,EAAzB,UAAAyB,OAAoC7C,IACjCiB,KAAK,SAAUyE,GACf/B,QAAQC,IAAI8B,EAASnE,QACnBN,KAAK,WACP9B,EAAMwG,iBAAiBvE,KAEvBwE,MAAM,SAAUC,GAChBlC,QAAQC,IAAIiC,MAzBG3B,EA6BnB4B,aAAe,SAAC5C,EAAD6C,GAAA,IAAM/F,EAAN+F,EAAM/F,MAAN,OAAkBkE,EAAKtE,SAAS,CAAEI,WA7B9BkE,EA+BnB8B,UAAY,SAAC5E,GACZ,IAAIjC,EAAKC,OAAAoG,EAAA,EAAApG,CAAA8E,GACTrD,IAAMS,IAAN,eAAAuB,OAAyBzB,IACtBH,KAAK,SAAUyE,GAAU,IAAAO,EACAP,EAASnE,KAA3BnB,EADkB6F,EAClB7F,MAAOC,EADW4F,EACX5F,QACblB,EAAMS,SAAS,CAACQ,MAAOA,EAAOC,QAASA,EAAS6F,SAAS,MACxDjF,KAAK,WACP9B,EAAMwG,iBAAiBvE,KAEvBwE,MAAM,SAAUC,GAChBlC,QAAQC,IAAIiC,MAzCG3B,EA8CnByB,iBAAmB,SAACvE,GACnB,IAAIjC,EAAKC,OAAAoG,EAAA,EAAApG,CAAA8E,GACTrD,IAAMS,IAAN,eAAAuB,OAAyBzB,EAAzB,aACGH,KAAK,SAAUyE,GAAU,IAClBpF,EAASoF,EAASnE,KAAlBjB,MACNnB,EAAMS,SAAS,CAACuG,WAAY7F,EAAO4F,SAAS,MAE7CN,MAAM,SAAUC,GAChBlC,QAAQC,IAAIiC,MAtDG3B,EA0DnBkC,eAAiB,SAAC/F,EAAQC,GAAT,OACfoB,EAAAC,EAAAC,cAACyE,EAAA,EAAUlB,MAAX,CAAiBmB,OAAQhG,EAAMM,QAC7BN,EAAMC,IAAI,SAACgG,EAAM7B,GACjB,OACChD,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAWG,YAAU,EAACC,MAAK,UAAA5D,OAAYxC,EAAQqE,IAAM1E,MAAOuG,QA5DhErC,EAAK/D,MAAQ,CAACC,MAAO,GAAIC,QAAS,GAAI6F,SAAS,EAAMC,WAAY,IAF/CjC,mFAMlBP,QAAQC,IAAI,WADO,IAEXxC,EAAO9B,KAAKJ,MAAMoG,MAAMC,OAAxBnE,GACLA,GACF9B,KAAK0G,UAAU5E,oCA2DR,IAAAsF,EAAApH,KAER,GADYA,KACFa,MAAM+F,QA0Bf,OAAQxE,EAAAC,EAAAC,cAAA,yBA1BgB,IAAA1B,EADbZ,KAEgCa,MAApCC,EADiBF,EACjBE,MAAOC,EADUH,EACVG,QAAS8F,EADCjG,EACDiG,WACvB,OACCzE,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKxB,GACLsB,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMrE,SAAWX,KAAKW,UACpByB,EAAAC,EAAAC,cAAC0C,EAAA,EAAKK,MAAN,wBACkBjD,EAAAC,EAAAC,cAAA,SAAItC,KAAKa,MAAMH,QAEjC0B,EAAAC,EAAAC,cAAC0C,EAAA,EAAKK,MAAN,KACCtE,EAAQE,IAAI,SAACC,EAAOkE,GAAR,OACXhD,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CACEF,MAAOjG,EACPT,KAAK,aACLC,MAAO0E,EACPkC,QAASF,EAAKvG,MAAMH,QAAU0E,EAC9BhF,SAAUgH,EAAKZ,kBAInBpE,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQ+B,KAAK,UAAb,WAED2B,EAAWvF,OAAS,GAvBZtB,KAuBuB8G,eAAe/F,EAAQ8F,WA7FxBf,8BCkBrByB,MAff,WACE,OACEnF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,KACEpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,KACCrF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,KACEtF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlI,IACjCyC,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,OAAK,EAACC,UAAW9B,SCFtC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjC,MACvB,2DCZNkC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9G,KAAK,SAAA+G,GACjCA,EAAaC","file":"static/js/main.8a7270a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Card, Header, Form, Input, Icon, Button, List, Label, Segment} from \"semantic-ui-react\";\r\n\r\nlet endpoint = \"http://localhost:8080\";\r\n\r\nclass SurveyApp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: \"\",\r\n      surveys: [],      \r\n      question: '',\r\n      options: [{text: \"\"}],\r\n      disabled: false,\r\n      votes: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTask()    \r\n  }\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    let {title,options,votes} = this.state;\r\n    options = options.map((option) => {\r\n      return option.text\r\n    })\r\n    votes = Array.from({length: options.length}, () => 0)\r\n    \r\n    if (title) {\r\n      axios\r\n        .post(\r\n          endpoint + \"/api/survey\",\r\n          {\r\n            title, \r\n            options,\r\n            votes\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n            }\r\n          }\r\n        )\r\n        .then(res => {          \r\n          this.getTask();\r\n          this.setState({\r\n            title: \"\",\r\n            options: []\r\n          });          \r\n        });\r\n    }\r\n  };\r\n\r\n  getTask = (id) => {\r\n    let url = endpoint + \"/api/survey\";\r\n    axios.get(url).then(res => {\r\n      const data = res.data\r\n      if (data) {\r\n        this.setState({\r\n          surveys: res.data.map(item => {            \r\n            return (\r\n              <Card key={item._id} color=\"purple\" fluid >\r\n                <Card.Content>\r\n                    <Card.Header textAlign=\"left\">\r\n                      <div style={{ wordWrap: \"break-word\" }}>{item.title}</div>\r\n                    </Card.Header>\r\n\r\n                    <Card.Meta>\r\n                      Survey {item._id}\r\n                    </Card.Meta>     \r\n                  </Card.Content>\r\n                  <Card.Content extra> \r\n                    <Button animated basic href={`/api/survey/${item._id}`}>\r\n                      <Button.Content visible>Take Survey</Button.Content>\r\n                      <Button.Content hidden>\r\n                        <Icon name='arrow right' />\r\n                      </Button.Content>\r\n                    </Button>   \r\n                  </Card.Content>\r\n              </Card>\r\n            );\r\n          })\r\n        });\r\n      } else{\r\n        this.setState({\r\n          surveys: []\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  addOption = (e) => {\r\n    this.setState({options: [...this.state.options, {text: \"\"}]})\r\n  }\r\n\r\n  removeOption = idx => () => {\r\n    this.setState({\r\n      options: this.state.options.filter((s, sidx) => idx !== sidx)\r\n    });\r\n  };\r\n\r\n  handleOptionChange = idx => evt => {\r\n    console.log('hello')\r\n    const newOptions = this.state.options.map((option, optionIdx) => {\r\n      if(idx !== optionIdx) return option\r\n      return {...option, text: evt.target.value}\r\n    })\r\n    this.setState({options: newOptions})\r\n  }\r\n\r\n\r\n  render() {\r\n    const {title, options} = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <Header className=\"header\" as=\"h2\">\r\n            Survey App\r\n          </Header>\r\n        </div>\r\n\r\n        <Card fluid>\r\n          <Card.Content>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                onChange={this.onChange}\r\n                value={title}\r\n                fluid\r\n                placeholder=\"Enter your question\"\r\n              />\r\n              {options.map((option,i) => (\r\n                <Form.Field inline key={i} required>\r\n                  <label>Option # {i+1}</label>\r\n                  <Input type=\"text\" placeholder=\"Please enter an option\" maxLength=\"80\" onChange={ this.handleOptionChange(i)}/>                      \r\n                </Form.Field>                      \r\n              ))}              \r\n              <Button fluid color=\"teal\" type='submit'>Submit</Button>\r\n            </Form>          \r\n          </Card.Content>\r\n\r\n          <Card.Content extra>\r\n            <Button icon labelPosition='left' onClick={this.addOption}>\r\n              <Icon name='plus' />\r\n              Add Option\r\n            </Button>                                 \r\n          </Card.Content>\r\n        </Card>\r\n        \r\n        <div className=\"row\">        \r\n          <Segment> \r\n          <Header className=\"header\" as=\"h2\">\r\n            Surveys\r\n          </Header>\r\n            <Card.Group>          \r\n            \r\n            {this.state.surveys}\r\n          </Card.Group>\r\n          </Segment>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SurveyApp;\r\n","import React, {Component} from 'react';\nimport axios from \"axios\";\nimport { Form, Radio, Button, Statistic} from 'semantic-ui-react'\n\nexport default class Survey extends Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {title: \"\", options: [], loading: true, statistics: []};\t\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"mounted\")\n\t\tconst { id } = this.props.match.params\n\t\tif(id) {\n\t\t\tthis.getSurvey(id)\n\t\t}\t\t\t\t\t\n\t}\n\t\n\tonSubmit = () => {\n\t\t//const endpoint = \"http://localhost:8080\";\n\t\tconst { id } = this.props.match.params\n\t\tconst {value} = this.state;\n\t\tlet _this = this;\n\t\taxios.put(`/api/survey/${id}/vote/${value}`)\n\t\t  .then(function (response) {\n\t\t  \tconsole.log(response.data)\t\t    \n\t\t  }).then(function(){\n\t\t  \t_this.getSurveyResults(id)\n\t\t  })\n\t\t  .catch(function (error) { \n\t\t  \tconsole.log(error)\n\t\t  });\n\t}\n\n\thandleChange = (e, { value }) => this.setState({ value })\n\n\tgetSurvey = (id) => {\t\t\n\t\tlet _this = this;\n\t\taxios.get(`/api/survey/${id}`)\n\t\t  .then(function (response) {\n\t\t  \tconst {title, options} = response.data;\t\t  \t\n\t\t    _this.setState({title: title, options: options, loading: false});\t\t    \n\t\t  }).then(function(){\n\t\t  \t_this.getSurveyResults(id);\n\t\t  })\n\t\t  .catch(function (error) { \n\t\t  \tconsole.log(error)\n\t\t  });\t\t\n\t}\n\n\n\tgetSurveyResults = (id) => {\t\t\n\t\tlet _this = this;\n\t\taxios.get(`/api/survey/${id}/results`)\n\t\t  .then(function (response) {\n\t\t  \tconst {votes} = response.data;\t\t  \t\n\t\t    _this.setState({statistics: votes, loading: false});\t\t    \n\t\t  })\n\t\t  .catch(function (error) { \n\t\t  \tconsole.log(error)\n\t\t  });\t\t\n\t}\n\n\tVoteStatistics = (options,votes) => (\n\t  <Statistic.Group widths={votes.length}>\n\t  \t{votes.map((vote, i) => {\n\t  \t\treturn (\n\t  \t\t\t<Statistic horizontal label={`Option ${options[i]}`} value={vote} />\n\t  \t\t\t)\n\t  \t})}\t    \n\t  </Statistic.Group>\n\t)\n\n\trender() {\n\t\tlet _this = this;\n\t\tif(!_this.state.loading) {\n\t\t\tconst {title, options, statistics} = _this.state;\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>{title}</h1>\n\t\t\t\t\t<Form onSubmit ={this.onSubmit}>\n\t\t\t\t\t  <Form.Field>\n\t\t\t\t\t    Selected value: <b>{this.state.value}</b>\n\t\t\t\t\t  </Form.Field>\n\t\t\t\t\t  <Form.Field>\n\t\t\t\t\t  {options.map((option,i) => (\n\t\t\t\t\t  \t\t<Radio\n\t\t\t\t\t  \t\t  label={option}\n\t\t\t\t\t  \t\t  name='radioGroup'\n\t\t\t\t\t  \t\t  value={i}\n\t\t\t\t\t  \t\t  checked={this.state.value === i}\n\t\t\t\t\t  \t\t  onChange={this.handleChange}\n\t\t\t\t\t  \t\t/>\n\t\t\t\t\t  \t))}\n\t\t\t\t\t  </Form.Field>  \n\t\t\t\t\t  <Button type='submit'>Submit</Button>      \n\t\t\t\t\t</Form>\n\t\t\t\t\t{statistics.length > 0 && _this.VoteStatistics(options,statistics)}\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else {\n\t\t\treturn (<p>Loading ... </p>)\n\t\t}\n\t\t\n\t}\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Container } from \"semantic-ui-react\";\nimport SurveyApp from \"./SurveyApp\";\nimport Survey from './Survey';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Router>\n\t        <Switch>\n\t          <Route path='/' exact component={SurveyApp} />\n\t          <Route path='/api/survey/:id' exact component={Survey} />\n\t        </Switch>\n      \t</Router>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}